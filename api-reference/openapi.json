{
  "openapi": "3.1.0",
  "info": {
    "title": "Web API",
    "description": "CodingIT is an AI-powered software engineering platform that provides live code execution, file uploads, real-time chat capabilities, and workflow management. This API enables interaction with AI models, sandbox environments, GitHub integration, and deployment systems.",
    "version": "1.0.2",
    "contact": {
      "name": "CodingIT Support",
      "url": "https://github.com/Gerome-Elassaad/CodingIT"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://codingit.vercel.app",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    },
    {
      "SupabaseAuth": []
    }
  ],
  "paths": {
    "/api/auth/github": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "GitHub OAuth callback",
        "description": "Handle GitHub OAuth callback and setup webhooks",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization code from GitHub OAuth"
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "State parameter for CSRF protection"
          },
          {
            "name": "error",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Error from GitHub OAuth"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to settings page with success or error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/github/revoke": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Revoke GitHub access token",
        "description": "Revoke GitHub access token and disconnect integration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "access_token"
                ],
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "GitHub access token to revoke"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing access token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Failed to revoke token"
          }
        }
      }
    },
    "/api/chat": {
      "post": {
        "tags": [
          "AI Generation"
        ],
        "summary": "Generate code fragment with AI",
        "description": "Generate AI-powered code fragments using various LLM models",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Streaming fragment generation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Streaming response with generated fragment"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/chat/workflow": {
      "post": {
        "tags": [
          "AI Generation"
        ],
        "summary": "Generate workflow with AI",
        "description": "Generate multi-step workflows with AI detection and fragment breakdown",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Streaming workflow generation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Streaming response with workflow or fragment"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/code/execute": {
      "post": {
        "tags": [
          "Code Execution"
        ],
        "summary": "Execute code in sandbox",
        "description": "Execute code in isolated E2B sandboxes with result capture",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionID",
                  "code"
                ],
                "properties": {
                  "sessionID": {
                    "type": "string",
                    "description": "Session identifier for sandbox"
                  },
                  "code": {
                    "type": "string",
                    "description": "Code to execute"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code execution result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResult"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters"
          },
          "500": {
            "description": "Execution error"
          }
        }
      }
    },
    "/api/sandbox": {
      "post": {
        "tags": [
          "Sandbox Management"
        ],
        "summary": "Create and run sandbox",
        "description": "Create new sandbox instances and execute fragments",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fragment"
                ],
                "properties": {
                  "fragment": {
                    "$ref": "#/components/schemas/FragmentSchema"
                  },
                  "userID": {
                    "type": "string"
                  },
                  "teamID": {
                    "type": "string"
                  },
                  "accessToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sandbox execution result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/terminal": {
      "post": {
        "tags": [
          "Sandbox Management"
        ],
        "summary": "Execute terminal command",
        "description": "Execute terminal commands in sandbox environments",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "command",
                  "sbxId"
                ],
                "properties": {
                  "command": {
                    "type": "string",
                    "description": "Terminal command to execute"
                  },
                  "sbxId": {
                    "type": "string",
                    "description": "Sandbox ID"
                  },
                  "workingDirectory": {
                    "type": "string",
                    "default": "/home/user",
                    "description": "Working directory for command execution"
                  },
                  "teamID": {
                    "type": "string"
                  },
                  "accessToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command execution result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stdout": {
                      "type": "string"
                    },
                    "stderr": {
                      "type": "string"
                    },
                    "exitCode": {
                      "type": "integer"
                    },
                    "workingDirectory": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters"
          },
          "500": {
            "description": "Command execution failed"
          }
        }
      }
    },
    "/api/files": {
      "get": {
        "tags": [
          "File Operations"
        ],
        "summary": "List files in sandbox",
        "description": "List all files in sandbox with tree structure",
        "parameters": [
          {
            "name": "sessionID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Session identifier"
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "code-interpreter-v1"
            },
            "description": "Sandbox template"
          }
        ],
        "responses": {
          "200": {
            "description": "File tree structure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileSystemNode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing sessionID"
          },
          "500": {
            "description": "Failed to fetch file tree"
          }
        }
      }
    },
    "/api/files/content": {
      "get": {
        "tags": [
          "File Operations"
        ],
        "summary": "Read file content",
        "description": "Read content of specific file in sandbox",
        "parameters": [
          {
            "name": "sessionID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameters"
          },
          "500": {
            "description": "Failed to read file"
          }
        }
      },
      "post": {
        "tags": [
          "File Operations"
        ],
        "summary": "Write file content",
        "description": "Write content to file in sandbox",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionID",
                  "path",
                  "content"
                ],
                "properties": {
                  "sessionID": {
                    "type": "string"
                  },
                  "path": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File written successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameters"
          },
          "500": {
            "description": "Failed to write file"
          }
        }
      }
    },
    "/api/files/sandbox": {
      "get": {
        "tags": [
          "File Operations"
        ],
        "summary": "Read from existing sandbox",
        "description": "Read file from existing sandbox by ID",
        "parameters": [
          {
            "name": "sandboxId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "File Operations"
        ],
        "summary": "Write to existing sandbox",
        "description": "Write file to existing sandbox by ID",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sandboxId",
                  "path",
                  "content"
                ],
                "properties": {
                  "sandboxId": {
                    "type": "string"
                  },
                  "path": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File written successfully"
          }
        }
      }
    },
    "/api/files/sandbox/list": {
      "get": {
        "tags": [
          "File Operations"
        ],
        "summary": "List files in existing sandbox",
        "description": "List all files in existing sandbox",
        "parameters": [
          {
            "name": "sandboxId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File tree structure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileSystemNode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/debug": {
      "post": {
        "tags": [
          "Debug & Analysis"
        ],
        "summary": "Analyze error",
        "description": "Analyze runtime errors and get AI-powered debugging suggestions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "error"
                ],
                "properties": {
                  "error": {
                    "type": "string",
                    "description": "Error message to analyze"
                  },
                  "context": {
                    "type": "object",
                    "description": "Additional context about the error"
                  },
                  "code": {
                    "type": "string",
                    "description": "Code that caused the error"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Error analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorAnalysis"
                }
              }
            }
          },
          "400": {
            "description": "Missing error message"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Analysis failed"
          }
        }
      },
      "get": {
        "tags": [
          "Debug & Analysis"
        ],
        "summary": "Get debug session",
        "description": "Get debug session details or list active sessions",
        "parameters": [
          {
            "name": "session_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specific debug session ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Debug session details or list of sessions",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DebugSession"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "sessions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DebugSession"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Debug session not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/deployments": {
      "post": {
        "tags": [
          "Deployments"
        ],
        "summary": "Create deployment",
        "description": "Deploy fragments to cloud platforms",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fragment",
                  "config"
                ],
                "properties": {
                  "fragment": {
                    "$ref": "#/components/schemas/FragmentSchema"
                  },
                  "config": {
                    "$ref": "#/components/schemas/DeploymentConfig"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deployment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fragment or config"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Deployment failed"
          }
        }
      },
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "List deployments",
        "description": "List deployment history for fragments",
        "parameters": [
          {
            "name": "fragment_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by fragment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of deployments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deployments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentResult"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/deployments/{id}": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "Get deployment status",
        "description": "Get specific deployment status and details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Deployment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Deployment status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentStatus"
                }
              }
            }
          },
          "404": {
            "description": "Deployment not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Deployments"
        ],
        "summary": "Cancel deployment",
        "description": "Cancel running deployment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deployment cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot cancel deployment"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/deployments/{id}/rollback": {
      "post": {
        "tags": [
          "Deployments"
        ],
        "summary": "Rollback deployment",
        "description": "Rollback deployment to previous version",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deployment rolled back",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot rollback deployment"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/integrations/github/repos": {
      "get": {
        "tags": [
          "GitHub Integration"
        ],
        "summary": "List GitHub repositories",
        "description": "List user's GitHub repositories with filtering options",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "updated"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "owner",
                "member"
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of repositories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GitHubRepository"
                      }
                    },
                    "total_count": {
                      "type": "integer"
                    },
                    "has_more": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "GitHub not connected"
          },
          "401": {
            "description": "GitHub token expired"
          },
          "500": {
            "description": "Failed to fetch repositories"
          }
        }
      }
    },
    "/api/integrations/github/repos/{owner}/{repo}": {
      "get": {
        "tags": [
          "GitHub Integration"
        ],
        "summary": "Get repository contents",
        "description": "Get contents of specific repository files or directories",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "main"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository contents",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "contents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GitHubContent"
                          }
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "directory"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "content": {
                          "$ref": "#/components/schemas/GitHubContent"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "file"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "GitHub token expired"
          },
          "404": {
            "description": "Repository or path not found"
          }
        }
      }
    },
    "/api/workflows": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "List workflows",
        "description": "List all workflows for user or team",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Create workflow",
        "description": "Create new multi-step workflow",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workflow created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Invalid workflow data"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/workflows/{id}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflow",
        "description": "Get specific workflow details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "404": {
            "description": "Workflow not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Workflows"
        ],
        "summary": "Update workflow",
        "description": "Update existing workflow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Delete workflow",
        "description": "Delete workflow permanently",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/workflows/{id}/execute": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Execute workflow",
        "description": "Execute workflow with input parameters",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inputData": {
                    "type": "object",
                    "description": "Input data for workflow execution"
                  },
                  "triggerType": {
                    "type": "string",
                    "default": "manual",
                    "enum": [
                      "manual",
                      "scheduled",
                      "webhook"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow execution started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "executionId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Workflow not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get execution status or list executions",
        "description": "Get specific workflow execution status or list all executions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "execution_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specific execution ID"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Execution details or list",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/WorkflowExecution"
                    },
                    {
                      "$ref": "#/components/schemas/WorkflowExecutionList"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Execution not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/import-dataset": {
      "post": {
        "tags": [
          "Data & Import"
        ],
        "summary": "Import HuggingFace dataset",
        "description": "Import code datasets from HuggingFace for embeddings and search",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "subset"
                ],
                "properties": {
                  "subset": {
                    "type": "string",
                    "description": "Dataset subset to import (e.g., \"python\")",
                    "example": "python"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Dataset import started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Started importing the \"python\" subset from \"bigcode/the-stack\". This will take a while."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing subset parameter"
          },
          "503": {
            "description": "Supabase not configured"
          }
        }
      }
    },
    "/api/webhooks/github": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "GitHub webhook handler",
        "description": "Handle GitHub webhook events (push, pull_request, issues)",
        "parameters": [
          {
            "name": "X-GitHub-Event",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "push",
                "pull_request",
                "issues",
                "ping"
              ]
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitHubWebhookPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid signature"
          },
          "500": {
            "description": "Webhook processing failed"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "SupabaseAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Supabase session token"
      }
    },
    "schemas": {
      "ChatRequest": {
        "type": "object",
        "required": [
          "messages",
          "template",
          "model",
          "config"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant",
                    "system"
                  ]
                },
                "content": {
                  "type": "string"
                }
              }
            }
          },
          "userID": {
            "type": "string"
          },
          "teamID": {
            "type": "string"
          },
          "template": {
            "type": "string",
            "enum": [
              "code-interpreter-v1",
              "nextjs-developer",
              "vue-developer",
              "streamlit-developer",
              "gradio-developer"
            ]
          },
          "model": {
            "type": "string",
            "enum": [
              "claude-3-sonnet-20240229",
              "claude-3-haiku-20240307",
              "gpt-4",
              "gpt-3.5-turbo"
            ]
          },
          "config": {
            "type": "object",
            "required": [
              "model"
            ],
            "properties": {
              "model": {
                "type": "string"
              },
              "apiKey": {
                "type": "string"
              },
              "temperature": {
                "type": "number",
                "minimum": 0,
                "maximum": 1
              },
              "maxTokens": {
                "type": "integer",
                "minimum": 1
              }
            }
          }
        }
      },
      "FragmentSchema": {
        "type": "object",
        "required": [
          "commentary",
          "template",
          "title",
          "description",
          "additional_dependencies",
          "has_additional_dependencies",
          "install_dependencies_command",
          "port",
          "file_path",
          "code"
        ],
        "properties": {
          "commentary": {
            "type": "string",
            "description": "Detailed description of the fragment generation steps"
          },
          "template": {
            "type": "string",
            "description": "Name of the template used"
          },
          "title": {
            "type": "string",
            "description": "Short title (max 3 words)"
          },
          "description": {
            "type": "string",
            "description": "Short description (max 1 sentence)"
          },
          "additional_dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Additional dependencies not in template"
          },
          "has_additional_dependencies": {
            "type": "boolean",
            "description": "Whether additional dependencies are required"
          },
          "install_dependencies_command": {
            "type": "string",
            "description": "Command to install additional dependencies"
          },
          "port": {
            "type": "integer",
            "nullable": true,
            "description": "Port number for web apps, null for scripts"
          },
          "file_path": {
            "type": "string",
            "description": "Relative file path including filename"
          },
          "code": {
            "type": "string",
            "description": "Generated runnable code"
          }
        }
      },
      "ExecutionResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExecutionResultInterpreter"
          },
          {
            "$ref": "#/components/schemas/ExecutionResultWeb"
          }
        ]
      },
      "ExecutionResultInterpreter": {
        "type": "object",
        "required": [
          "sbxId",
          "template",
          "stdout",
          "stderr",
          "cellResults"
        ],
        "properties": {
          "sbxId": {
            "type": "string"
          },
          "template": {
            "type": "string",
            "enum": [
              "code-interpreter-v1"
            ]
          },
          "stdout": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stderr": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "runtimeError": {
            "type": "object",
            "description": "Execution error details"
          },
          "cellResults": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Cell execution results"
            }
          },
          "error": {
            "type": "string"
          }
        }
      },
      "ExecutionResultWeb": {
        "type": "object",
        "required": [
          "sbxId",
          "template",
          "url"
        ],
        "properties": {
          "sbxId": {
            "type": "string"
          },
          "template": {
            "type": "string",
            "enum": [
              "nextjs-developer",
              "vue-developer",
              "streamlit-developer",
              "gradio-developer"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Live preview URL"
          }
        }
      },
      "FileSystemNode": {
        "type": "object",
        "required": [
          "name",
          "isDirectory"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "isDirectory": {
            "type": "boolean"
          },
          "path": {
            "type": "string",
            "description": "Full path (for files)"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileSystemNode"
            },
            "description": "Child nodes (for directories)"
          }
        }
      },
      "ErrorAnalysis": {
        "type": "object",
        "properties": {
          "analysis": {
            "type": "string",
            "description": "AI-powered error analysis"
          },
          "suggestions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Suggested fixes"
          },
          "severity": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "critical"
            ]
          },
          "category": {
            "type": "string",
            "description": "Error category"
          }
        }
      },
      "DebugSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "completed",
              "failed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorAnalysis"
            }
          }
        }
      },
      "DeploymentConfig": {
        "type": "object",
        "required": [
          "provider"
        ],
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "vercel",
              "netlify",
              "aws",
              "heroku"
            ]
          },
          "environment": {
            "type": "string",
            "enum": [
              "development",
              "staging",
              "production"
            ]
          },
          "domain": {
            "type": "string"
          },
          "env_vars": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "DeploymentResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "building",
              "deploying",
              "success",
              "failed"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "logs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeploymentStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "building",
              "deploying",
              "success",
              "failed"
            ]
          },
          "progress": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "logs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "type": "string"
          }
        }
      },
      "GitHubRepository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          },
          "clone_url": {
            "type": "string",
            "format": "uri"
          },
          "ssh_url": {
            "type": "string"
          },
          "private": {
            "type": "boolean"
          },
          "fork": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string",
                "format": "uri"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "pushed_at": {
            "type": "string",
            "format": "date-time"
          },
          "language": {
            "type": "string"
          },
          "stargazers_count": {
            "type": "integer"
          },
          "watchers_count": {
            "type": "integer"
          },
          "forks_count": {
            "type": "integer"
          },
          "open_issues_count": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "default_branch": {
            "type": "string"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "type": "boolean"
          },
          "has_projects": {
            "type": "boolean"
          },
          "has_wiki": {
            "type": "boolean"
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "type": "boolean"
          },
          "license": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "spdx_id": {
                "type": "string"
              }
            }
          }
        }
      },
      "GitHubContent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "file",
              "dir"
            ]
          },
          "size": {
            "type": "integer"
          },
          "sha": {
            "type": "string"
          },
          "content": {
            "type": "string",
            "description": "Base64 encoded content (for files)"
          },
          "encoding": {
            "type": "string",
            "enum": [
              "base64"
            ]
          },
          "download_url": {
            "type": "string",
            "format": "uri"
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "Workflow": {
        "type": "object",
        "required": [
          "id",
          "name",
          "fragments",
          "connections",
          "variables",
          "triggers",
          "version"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fragments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FragmentNode"
            }
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowConnection"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowVariable"
            }
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowTrigger"
            }
          },
          "version": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WorkflowCreate": {
        "type": "object",
        "required": [
          "name",
          "fragments"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fragments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FragmentNode"
            }
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowConnection"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowVariable"
            }
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowTrigger"
            }
          }
        }
      },
      "WorkflowUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fragments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FragmentNode"
            }
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowConnection"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowVariable"
            }
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowTrigger"
            }
          },
          "version": {
            "type": "integer"
          }
        }
      },
      "WorkflowList": {
        "type": "object",
        "properties": {
          "workflows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Workflow"
            }
          },
          "total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          }
        }
      },
      "FragmentNode": {
        "type": "object",
        "required": [
          "id",
          "type",
          "position",
          "data"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "fragment"
            ]
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              }
            }
          },
          "data": {
            "$ref": "#/components/schemas/FragmentSchema"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WorkflowConnection": {
        "type": "object",
        "required": [
          "id",
          "source",
          "target",
          "dataType"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string"
              },
              "portId": {
                "type": "string"
              }
            }
          },
          "target": {
            "type": "object",
            "properties": {
              "nodeId": {
                "type": "string"
              },
              "portId": {
                "type": "string"
              }
            }
          },
          "dataType": {
            "type": "string",
            "enum": [
              "object",
              "string",
              "number",
              "boolean",
              "array"
            ]
          }
        }
      },
      "WorkflowVariable": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "boolean",
              "object",
              "array"
            ]
          },
          "default": {
            "description": "Default value"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "WorkflowTrigger": {
        "type": "object",
        "required": [
          "id",
          "type",
          "config"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "manual",
              "scheduled",
              "webhook"
            ]
          },
          "config": {
            "type": "object",
            "description": "Trigger-specific configuration"
          }
        }
      },
      "WorkflowExecution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "workflow_id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "running",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "input_data": {
            "type": "object"
          },
          "output_data": {
            "type": "object"
          },
          "logs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WorkflowExecutionList": {
        "type": "object",
        "properties": {
          "executions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowExecution"
            }
          },
          "total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          }
        }
      },
      "GitHubWebhookPayload": {
        "type": "object",
        "properties": {
          "ref": {
            "type": "string"
          },
          "repository": {
            "type": "object",
            "properties": {
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "commits": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "author": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "pusher": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          },
          "pull_request": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "issue": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "action": {
            "type": "string",
            "description": "Action performed (for PR and issue events)"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "GitHub OAuth and token management"
    },
    {
      "name": "AI Generation",
      "description": "AI-powered code and workflow generation"
    },
    {
      "name": "Code Execution",
      "description": "Execute code in secure sandboxes"
    },
    {
      "name": "Sandbox Management",
      "description": "Create and manage E2B sandboxes"
    },
    {
      "name": "File Operations",
      "description": "File system operations in sandboxes"
    },
    {
      "name": "Debug & Analysis",
      "description": "Error analysis and debugging tools"
    },
    {
      "name": "Deployments",
      "description": "Deploy applications to cloud platforms"
    },
    {
      "name": "GitHub Integration",
      "description": "GitHub repository and webhook integration"
    },
    {
      "name": "Workflows",
      "description": "Multi-step workflow management"
    },
    {
      "name": "Data & Import",
      "description": "Dataset import and processing"
    },
    {
      "name": "Webhooks",
      "description": "External webhook handlers"
    }
  ]
}
